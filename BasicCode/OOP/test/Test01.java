package test;

public class Test01 {
  public static void main(String[] args) {
    // TODO : 여기에 코드를 입력하세요.
  }
}

/////////////////////////// 변수 추가하기
//
// 따라하기 1-1 : Avatar 클래스를 만듭니다.
// 따라하기 1-2 : 필드를 추가합니다.
//			> 필드타입 : String, 필드명 : name, 초기 값 = "Tim"
// 따라하기 1-3 : main함수에 인스턴스를 만들어 봅니다.
//			> 인스턴스 명은 my로 합니다.
//
// 중간 확인하기 : my에 name을 출력해 봅니다. ("Tim"이 출력되어야 합니다.)


/////////////////////////// 함수 추가하기
//
// 따라하기 2-1 : 메서드를 추가합니다.
//			> 메서드 타입 String getName();
//			> 호출이 되면, Name을 반환하는 기능합니다.
// 중간 확인하기 : main함수에서 my.getName()을 출력해 봅니다.


/////////////////////////// 생성자 만들기
//
// 따라하기 3-1 : Avatar(String newName)생성자를 만듭니다.
//			newName을 name에 저장하는 기능을 합니다.
// 따라하기 3-2 : new Avatar("Jack");으로 새로운 인스턴스(jack)를 만듭니다.
//
// 중간 확인하기 : jack.name을 출력해 봅니다. ("Tim"이 출력되어야 합니다.)


/////////////////////////// 생성자 만들기2 - this()
//
// 따라하기 4-1 : Avatar()생성자를 만듭니다.
//			this("torr");을 호출하는 기능합니다.
//
//중간 확인하기 : my.name을 출력해 봅니다. ("torr"이 출력되어야 합니다.)


/////////////////////////// This 키워드 사용하기
//
// 따라하기 5-1 : void setName(String name)를 생성합니다.
//			클래스의 name에 저장합니다.
// 따라하기 5-2 : my.setName()함수를 이용하여 name을 "Jun"으로 변경합니다.
//
// 중간 확인하기 : my.name을 출력해 봅니다. ("Jun"이 출력되어야 합니다.)


/////////////////////////// 접근제어자1 - private
//
// 따라하기 6-1 : name의 접근제어자를 private로 설정합니다.
//
// 따라하기 6-2 : my.name을 출력해봅니다. (에러가 나면 정상입니다.)
//
// 중간 확인하기 : my.getName();을 출력해 봅니다. ("Jun"이 출력되어야 합니다.)


/////////////////////////// 상속
// 개요 - 내 아파타를 업그레이드 할 수 있습니다.
//
// 따라하기 7-1 : newAvatar클래스를 만들고, Avatar를 상속받습니다.
//
// 따라하기 7-2 : String skill을 생성하고, "not yet"을 저장합니다.
//
// 따라하기 7-3 : newAvatar클래스의 인스턴스 newMy를 만듭니다.
//
// 중간 확인하기 : my.getName();을 출력해 봅니다. ("torr"이 출력되어야 합니다.)


/////////////////////////// 접근제어자2 - protected
// 개요 - 업그레이드 하면 나 이름 뒤에(v2)라는 글자가 붙습니다. 
//
// 따라하기 8-1 : newAvatar클래스의 생성자를 만듭니다.
//			아래와 같은 기능을 합니다.
//			name += "(v2)";
//			> 에러가 나야 정상입니다.
//			name의 접근제어자를 private에서 protected로 변경합니다.
//
// 따라하기 8-2 : name의 접근제어자를 private로 변경합니다.
//
// 따라하기 8-3 : setName과 getName을 이용하여 동일한 기능을 하는 함수를 만듭니다.


/////////////////////////// super()
// 
// 따라하기 9-1 : newAvatar(String name)생성자를 생성합니다.
//			super()를 이용하여 name에 저장 할 수 있도록 합니다.
//			name뒤에 "(v2)"가 붙도록 합니다.


/////////////////////////// super
//
// 따라하기 10-1 : allNewAvatar 클래스를 생성하고, newAvatar클래스를 상속받습니다.
//
// 따라하기 10-2 : String skill="heal";필드를 생성합니다.
//
// 따라하기 10-2 : action메서드는 skill을 반환합니다.
//
// 따라하기 10-3 : action2메서드는 super.skill을 반환합니다.

/////////////////////////// overriding
//
// 따라하기 11-1 : newAvatar에 action메서드를 만듭니다.
// 				skill을 반환합니다.
//
// 따라하기 11-2 : main함수에 2개의 인스턴스를 만듭니다.
//				newAvatar newMy
//				allNewAvatar allMy
//				newMy.action과 allMy.action을 비교해봅니다.
//
// 따라하기 11-3 : newAvatar newMy = new newAvatar();에서 
//				인스턴스를 allMyAvatar로 변경해봅니다.

/////////////////////////// super2
//
// 따라하기 12-1 : allNewAvatar 클래스의 action()의 내용을 
//				super.action()으로 바꾸어봅니다.
//
// 확인해보기	